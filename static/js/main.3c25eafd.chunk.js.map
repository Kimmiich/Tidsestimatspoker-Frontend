{"version":3,"sources":["helperFunctions/calculations.js","components/Summary.tsx","helperFunctions/saveInputs.js","components/TimeEstimationForm/TimeEstimationForm.tsx","helperFunctions/checkIfNumber.js","helperFunctions/saveActualTime.js","components/Issue.tsx","helperFunctions/getArrayOfMedians.js","helperFunctions/getArrayOfActuals.js","components/TotalSummary.tsx","components/Header.tsx","components/SignedIn/SignedIn.tsx","components/Startpage/Startpage.tsx","App.tsx","index.tsx"],"names":["median","array","mid","Math","floor","length","nums","sort","a","b","totalTime","total","number","Summary","props","minVal","min","maxVal","max","medianVal","averageVal","reduce","average","saveInput","obj","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","err","TimeEstimationForm","user","issueName","issue","useState","estimatedHours","setEstimatedHours","className","onSubmit","evt","preventDefault","hoursAsNumber","parseInt","newInput","time","type","value","onChange","target","required","placeholder","Object","entries","name","toString","checkEstimHours","checkIfNumber","estimates","every","estimate","saveActualTime","actualTime","Issue","bjorn","emil","kimmie","love","stina","setEstimates","useEffect","setActualTime","checkTime","onClick","getArrayOfMedians","issues","arrayOfHourObjs","map","arrayOfMedians","hourObj","innerTotal","push","medianOfIssue","getArrayOfActuals","arrayOfActuals","forEach","TotalSummary","realTime","totalEstimate","totalReal","totalDiff","real","diffTotal","Header","projectName","SignedIn","displayName","charAt","toLocaleUpperCase","slice","issuesFromGH","setIssuesFromGH","issuesFromDB","setIssuesFromDB","title","githubProject","i","StartPage","state","userName","id","setState","getUser","React","Component","App","setUserName","saveUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c25eafd.chunk.js","sourcesContent":["// Det mittersta värdet av en sorterad lista\nexport const median = (array) => {\n    const mid = Math.floor(array.length / 2),\n        nums = [...array].sort((a, b) => a - b);\n    return array.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\n\n// Medelvärdet\nexport const average = (array) => {\n    return array.reduce((a, b) => a + b, 0) / array.length;\n};\n\n//Maxvärdet\nexport const max = (array) => {\n    return Math.max(...array);\n};\n\n//Minvärdet\nexport const min = (array) => {\n    return Math.min(...array);\n};\n\n//Funktion som adderar alla medelvärden\nexport const totalTime = (array) => {\n    let total = 0;\n    for (let number in array) {\n        total += array[number];\n    }\n    return total;\n};\n\n//Funktion som räknar ut diff\nexport const diffTotal = (average, real) => {\n    let diff = real - average;\n    return diff;\n};\n","import { min, max, median, average } from '../helperFunctions/calculations'\n\n// //Testsiffror\n// let array: number[] = [1, 5, 14, 4, 5]\n\ninterface Props {\n  array?: any\n}\n\nconst Summary = (props: Props) => {\n\n  const { array } = props;\n\n  const minVal = min(array)\n  const maxVal = max(array)\n  const medianVal = median(array)\n  const averageVal = average(array)\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>Min</th>\n          <th>Max</th>\n          <th>Median</th>\n          <th>Medel</th>\n        </tr>\n        <tr>\n          <td>{minVal}h</td>\n          <td>{maxVal}h</td>\n          <td>{medianVal}h</td>\n          <td>{averageVal}h</td>\n        </tr>\n      </tbody>\n    </table>\n\n  )\n}\n\nexport default Summary\n","const API_URL = 'https://timeestimator.herokuapp.com/estimate';\n\n//Accepts a object with inputvalue and userName/id?\nconst saveInput = (obj) => {\n    console.log(obj);\n    fetch(API_URL, {\n        method: 'post',\n        headers: { 'Content-type': 'application/json' },\n        body: JSON.stringify(obj),\n    })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log('data', data);\n        })\n        .catch((err) => console.log(err));\n};\n\nexport default saveInput;\n","import { useState } from 'react';\nimport saveInput from '../../helperFunctions/saveInputs';\n\nimport './TimeEstimationForm.css';\n\ninterface Props {\n    user: string;\n    issueName: string;\n    issue: {\n        bjorn?: number\n        emil?: number\n        kimmie?: number\n        love?: number\n        stina?: number\n    }\n}\n\n\nfunction TimeEstimationForm(props: Props) {\n\n    const { user, issueName, issue } = props;\n\n    const [estimatedHours, setEstimatedHours] = useState('');\n\n    const handleSubmit = (evt: any) => {\n        evt.preventDefault();\n\n        let hoursAsNumber = parseInt(estimatedHours, 10);\n\n        let newInput = {\n            issueName: issueName,\n            time: hoursAsNumber,\n            user: user,\n        };\n        console.log('newInput: ', newInput);\n        saveInput(newInput);\n    };\n\n    const handleInputChange = ({ target }: any) => {\n        if (target.value < 1) target.value = 1;\n        if (target.value > 999) target.value = 999;\n        setEstimatedHours(target.value);\n    };\n\n    const checkEstimHours = () => {\n\n\n        for (let [name, time] of Object.entries(issue)) {\n            if (name === user) {\n                let guess = time.toString()\n                return guess\n            }\n        }\n    }\n\n    return (\n        <form className=\"time-estimation-form\" onSubmit={handleSubmit}>\n            <p>\n                <label>Jag estimerar att det tar: </label>\n                <br />\n                <input\n                    type=\"number\"\n                    value={estimatedHours}\n                    onChange={handleInputChange}\n                    required\n                    placeholder={checkEstimHours()}\n                />\n                timmar\n            </p>\n            <p>\n                <button className='saveTimeBtn' type=\"submit\">\n                    Spara estimerade timmar\n                </button>\n            </p>\n        </form>\n    );\n}\n\nexport default TimeEstimationForm;\n","const checkIfNumber = (estimates) => {\n\n  return estimates.every(estimate => typeof estimate == \"number\")\n}\n\nexport default checkIfNumber;","//Saves actaul time in database\nconst saveActualTime = (actualTime, issue) => {\n    fetch('https://timeestimator.herokuapp.com/setactualtime', {\n        method: 'post',\n        headers: { 'Content-type': 'application/json' },\n        body: JSON.stringify({time: actualTime, issueName: issue.issueName}),\n    })\n    .then((res) => res.json())\n    .then((data) => {\n        console.log('data', data);\n    })\n    .catch((err) => console.log(err));\n}\n\n\nexport default saveActualTime;","import Summary from './Summary';\nimport TimeEstimationForm from './TimeEstimationForm/TimeEstimationForm';\nimport { useState, useEffect } from 'react';\nimport checkIfNumber from '../helperFunctions/checkIfNumber';\nimport saveActualTime from '../helperFunctions/saveActualTime';\n\ninterface Props {\n  issue: {\n    issueName: string;\n    githubProject: string;\n    bjorn?: number\n    emil?: number\n    kimmie?: number\n    love?: number\n    stina?: number\n    actualTime?: number | string \n  };\n  user: string;\n}\n\nconst Issue = (props: Props) => {\n  const { issue, user } = props;\n  const [estimates, setEstimates] = useState([\n    issue.bjorn,\n    issue.emil,\n    issue.kimmie,\n    issue.love,\n    issue.stina\n  ]);\n\n  useEffect(() => {\n    setEstimates([\n      issue.bjorn,\n      issue.emil,\n      issue.kimmie,\n      issue.love,\n      issue.stina,\n    ]);\n  }, [props.issue]);\n\n  const [actualTime, setActualTime] = useState(issue.actualTime);\n\n  const onChange = (evt: any) => {\n    let hoursAsNumber = parseInt(evt.target.value);\n    console.log('typeof hoursAsNumber', typeof hoursAsNumber);\n    \n    setActualTime(hoursAsNumber);\n  }\n\n  const sendTime = () => {\n    \n    saveActualTime(actualTime, issue);\n  }\n  \n  const checkTime = () => {\n    return (issue.actualTime)?.toString() || \"-\";\n  }\n\n  return (\n    <>\n      <div className='issue'>\n        <div className=\"issueName\">\n          {issue.issueName}\n        </div>\n        <TimeEstimationForm user={user} issueName={issue.issueName} issue={issue} />\n        {checkIfNumber(estimates) ? <Summary array={estimates} /> : ''}\n        <div className='actualTime'>\n          <label>Faktisk tid</label>\n          <input className='actualInput'\n            type=\"text\"\n            placeholder={checkTime()}\n            onChange={onChange}\n          />\n        </div>\n        <button className='saveActBtn' onClick={sendTime}>Spara</button>\n      </div>\n    </>\n  );\n};\n\nexport default Issue;\n","import { median } from './calculations';\n\nfunction getArrayOfMedians(issues) {\n    let arrayOfHourObjs = issues.map((issue) => {\n        return {\n            emil: issue.emil || 0,\n            bjorn: issue.bjorn || 0,\n            stina: issue.stina || 0,\n            love: issue.love || 0,\n            kimmie: issue.kimmie || 0,\n        };\n    });\n\n    let arrayOfMedians = [];\n    for (const hourObj of arrayOfHourObjs) {\n        let innerTotal = [];\n        for (const number in hourObj) {\n            innerTotal.push(hourObj[number]);\n        }\n        let medianOfIssue = median(innerTotal);\n        arrayOfMedians.push(medianOfIssue);\n    }\n    return arrayOfMedians;\n}\n\nexport default getArrayOfMedians;\n","function getArrayOfActuals(issues) {\nlet arrayOfActuals = [];\n\nissues.forEach(issue => {\n  if(issue.actualTime){\n    arrayOfActuals.push(issue.actualTime)\n  }\n  return;\n})\n\nreturn arrayOfActuals;\n\n}\nexport default getArrayOfActuals;\n","import React from 'react';\nimport { totalTime, diffTotal } from '../helperFunctions/calculations';\n\ninterface Props {\n    estimate: number[];\n    realTime: number[];\n}\n\nconst TotalSummary = (props: Props) => {\n    const { estimate, realTime } = props;\n\n    //Uträkningar på vardera värde\n    let totalEstimate = totalTime(estimate);\n    let totalReal = totalTime(realTime);\n    let totalDiff = diffTotal(totalEstimate, totalReal);\n\n    return (\n        <>\n            <section>\n                <h3>Totalt</h3>\n                <p>Estimerad tid: {totalEstimate} timmar. </p>\n                <p>Faktisk tid: {totalReal} timmar. </p>\n                <p>Diff: {totalDiff} timmar.</p>\n            </section>\n        </>\n    );\n};\n\nexport default TotalSummary;\n","import getArrayOfMedians from '../helperFunctions/getArrayOfMedians';\nimport getArrayOfActuals from '../helperFunctions/getArrayOfActuals';\nimport TotalSummary from './TotalSummary';\n\ninterface Props {\n    projectName: string;\n    issues: any[];\n}\n\nconst Header = (props: Props) => {\n    const { projectName, issues } = props;\n\n    let arrayOfMedians = getArrayOfMedians(issues);\n    let arrayOfActuals = getArrayOfActuals(issues)\n    \n    return (\n        <div>\n            <span>Projekt: {projectName} </span>\n            {<TotalSummary estimate={arrayOfMedians} realTime={arrayOfActuals} />}\n        </div>\n    );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport Issue from '../Issue';\nimport Header from '../Header';\n\nimport './SignedIn.css';\n\ninterface Props {\n    user: string;\n}\n\nfunction SignedIn(props: Props) {\n    const { user } = props;\n\n    //Capitalize the first letter of name\n    const displayName = user.charAt(0).toLocaleUpperCase() + user.slice(1);\n\n    // Fetched from github - only name and project\n    const [issuesFromGH, setIssuesFromGH] = useState([]);\n\n    // Saved to our db - with time estimates per person\n    const [issuesFromDB, setIssuesFromDB] = useState([]);\n\n    useEffect(() => {\n        fetch(\n            'https://api.github.com/repos/Kimmiich/Tidsestimatspoker-Frontend/issues'\n        )\n            .then((res) => res.json())\n            .then((data) => {\n                setIssuesFromGH(\n                    data.map((issue: any) => {\n                        return {\n                            issueName: issue.title,\n                            githubProject: 'Tidsestimatspoker-Frontend',\n                        };\n                    })\n                );\n            });\n    }, []);\n\n    useEffect(() => {\n        fetch('https://timeestimator.herokuapp.com/setallissues', {\n            method: 'post',\n            headers: { 'Content-type': 'application/json' },\n            body: JSON.stringify(issuesFromGH),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log('data from mongodb', data);\n            })\n            .catch((err) => console.log(err));\n    }, [issuesFromGH]);\n\n    useEffect(() => {\n        fetch('https://timeestimator.herokuapp.com/getallissues-with-all-estimates')\n            .then((res) => res.json())\n            .then((data) => {\n                // replace issues with mongoDB data\n                console.log('data from mongodb with time estimates', data);\n                setIssuesFromDB(data);\n            })\n            .catch((err) => console.log(err));\n    }, []);\n\n    return (\n        <section className=\"signed-in-page\">\n            <header className=\"signed-in-header\">\n                <h1 className=\"signed-in-text\">{displayName}</h1>\n            </header>\n            <main className=\"project-container\">\n                <header>\n                    <Header\n                        projectName=\"Tidsestimatspoker-Frontend\"\n                        issues={issuesFromDB}\n                    />\n                </header>\n                <div>\n                    {issuesFromDB.map((issue, i) => {\n                        return <Issue key={i} issue={issue} user={user} />;\n                    })}\n                </div>\n            </main>\n        </section>\n    );\n}\n\nexport default SignedIn;\n","import React from 'react';\nimport './Startpage.css';\n\ninterface Props {\n    getUser(userName: string): void;\n}\n\ninterface State {\n    userName: string;\n}\n\nclass StartPage extends React.Component<Props, State> {\n    state = {\n        userName: '',\n    };\n\n    render() {\n        let onChange = (evt: any) => {\n            console.log('onChange', evt.target.value);\n            this.setState({ userName: evt.target.value });\n        };\n\n        let onClick = () => {\n            this.props.getUser(this.state.userName);\n        };\n\n        return (\n            <div className=\"startpage-container\">\n                <main className=\"startpage-box\">\n                    <section className=\"startpage-sign-in\">\n                        <h1 className=\"title\">TIDSESTIMATOR</h1>\n                        <select\n                            name=\"userNames\"\n                            id=\"userNames\"\n                            onChange={onChange}\n                        >\n                            <option value=\"\">Välj användare</option>\n                            <option value=\"kimmie\">Kimmie</option>\n                            <option value=\"stina\">Stina</option>\n                            <option value=\"emil\">Emil</option>\n                            <option value=\"love\">Love</option>\n                            <option value=\"bjorn\">Björn</option>\n                        </select>\n                        <button className=\"sign-in\" onClick={onClick}>\n                            Logga in\n                        </button>\n                    </section>\n                    <section className=\"footer\">\n                        <p className=\"explanation-text\">\n                            Välj en användare för att logga in\n                        </p>\n                    </section>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default StartPage;\n","import React, { useState } from 'react';\n\nimport SignedIn from './components//SignedIn/SignedIn';\nimport StartPage from './components/Startpage/Startpage';\n\nfunction App() {\n    const [userName, setUserName] = useState('');\n\n    let saveUser = (userName: string) => {\n        console.log('saveUser()', userName);\n        setUserName(userName);\n    };\n\n    return (\n        <>\n            {userName ? (\n                <>\n                    <button className='logOutBtn' onClick={() => saveUser('')}>Logga ut</button>\n                    <SignedIn user={userName} />\n                </>\n            ) : (\n                    <>\n                        <StartPage getUser={saveUser} />\n                    </>\n                )}\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}